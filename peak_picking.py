import numpy as np
import matplotlib.pyplot as plt


Y = [0.0, 0.0, 0.0, 0.0, 108195.8, 277017.0, 438280.3, 1604796.0, 5756622.0, 12656900.0, 20127380.0, 21624310.0, 14644200.0, 7651326.0, 2267621.0, 547623.1, 178284.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 148438.8, 530305.3, 999035.3, 3014816.0, 9597173.0, 18464050.0, 27383200.0, 25584680.0, 15987140.0, 7122144.0, 1766188.0, 385890.8, 343326.7, 216043.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195239.4, 870368.9, 2843851.0, 8056841.0, 13796170.0, 18214540.0, 14707860.0, 8750300.0, 3156613.0, 715111.1, 5532.554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173472.2, 601625.6, 2172683.0, 5179116.0, 8421004.0, 9604806.0, 6785137.0, 3706604.0, 1157345.0, 271008.2, 25807.26, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 284306.9, 1103015.0, 2218285.0, 3383288.0, 3316782.0, 2172913.0, 1102379.0, 385056.8, 111222.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 302963.8, 806617.5, 3304605.0, 11685840.0, 31738610.0, 53225720.0, 66458840.0, 50507620.0, 29383970.0, 9824003.0, 2494762.0, 350933.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14123.5, 366002.4, 1067094.0, 1765491.0, 2471352.0, 7288165.0, 24447800.0, 50309170.0, 77923600.0, 78936610.0, 51457460.0, 25377940.0, 7166363.0, 1939737.0, 1226872.0, 659510.2, 22269.74, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 74849.84, 318717.3, 852316.9, 1075785.0, 2677991.0, 8937107.0, 26633360.0, 45842620.0, 60312060.0, 47869200.0, 28244360.0, 9825027.0, 2494578.0, 592152.3, 445679.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47589.72, 412955.3, 499578.5, 719158.8, 883207.4, 2420977.0, 8111822.0, 16964300.0]

X = [1105.958, 1105.968, 1105.977, 1105.987, 1105.997, 1106.007, 1106.017, 1106.027, 1106.037, 1106.047, 1106.056, 1106.066, 1106.076, 1106.086, 1106.096, 1106.106, 1106.116, 1106.127, 1106.137, 1106.147, 1106.156, 1106.463, 1106.473, 1106.482, 1106.492, 1106.502, 1106.512, 1106.522, 1106.532, 1106.542, 1106.552, 1106.561, 1106.571, 1106.581, 1106.591, 1106.601, 1106.611, 1106.621, 1106.631, 1106.64, 1106.65, 1106.66, 1106.67, 1106.976, 1106.986, 1106.996, 1107.006, 1107.016, 1107.026, 1107.036, 1107.046, 1107.055, 1107.065, 1107.075, 1107.085, 1107.095, 1107.105, 1107.115, 1107.123, 1107.133, 1107.143, 1107.153, 1107.48, 1107.489, 1107.499, 1107.509, 1107.519, 1107.529, 1107.539, 1107.549, 1107.559, 1107.569, 1107.578, 1107.588, 1107.598, 1107.608, 1107.618, 1107.627, 1107.637, 1107.647, 1107.656, 1107.983, 1107.993, 1108.003, 1108.013, 1108.023, 1108.033, 1108.042, 1108.052, 1108.062, 1108.072, 1108.082, 1108.092, 1108.102, 1108.112, 1108.123, 1108.133, 1108.143, 1108.153, 1108.47, 1108.48, 1108.49, 1108.5, 1108.51, 1108.52, 1108.529, 1108.539, 1108.549, 1108.559, 1108.569, 1108.579, 1108.589, 1108.599, 1108.609, 1108.619, 1108.629, 1108.638, 1108.648, 1108.658, 1108.668, 1108.678, 1108.956, 1108.965, 1108.975, 1108.985, 1108.995, 1109.005, 1109.015, 1109.025, 1109.035, 1109.045, 1109.055, 1109.065, 1109.075, 1109.084, 1109.094, 1109.104, 1109.114, 1109.124, 1109.134, 1109.144, 1109.154, 1109.164, 1109.174, 1109.184, 1109.194, 1109.461, 1109.471, 1109.481, 1109.491, 1109.501, 1109.511, 1109.521, 1109.531, 1109.541, 1109.551, 1109.561, 1109.57, 1109.58, 1109.59, 1109.6, 1109.61, 1109.62, 1109.63, 1109.64, 1109.65, 1109.66, 1109.669, 1109.679, 1109.689, 1109.957, 1109.967, 1109.977, 1109.987, 1109.997, 1110.007, 1110.017, 1110.027, 1110.037, 1110.047, 1110.057, 1110.066]




def peak_picker(X,Y,view_plot=0):
    xvals = np.linspace(X[0],X[-1],5000)
    Y_interp = np.interp(xvals,X,Y)
    Y_1stD = np.gradient(Y_interp)
    peaks = []
    for i in range(len(Y_1stD)-1):
        if Y_1stD[i] >= 0.1 and Y_1stD[i+1] <= 0.1:
            peaks.append((xvals[i],Y_interp[i]))

    if view_plot == 1:
        plt.plot(X,Y,label = "data")

        for i in range(len(peaks)):
            plt.plot([peaks[i][0]]*2,[peaks[i][1],peaks[i][1]], 'b-x')
        plt.legend()
        plt.show()

    return peaks

def find_maxima(X,Y):
    peaks = peak_picker(X, Y, 0)
    Y_peaks = [peaks[x][1] for x in range(len(peaks))]
    maxima = []
    peaks_1sD = np.gradient(Y_peaks)

    for i in range(len(peaks_1sD)-1):
        if peaks_1sD[i] >= 0.1 and peaks_1sD[i+1] <= 0.1:
            maxima.append((peaks[i+1][0],peaks[i+1][1]))

    return maxima
if __name__ == '__main__':


    print(peak_picker(X,Y,1))

